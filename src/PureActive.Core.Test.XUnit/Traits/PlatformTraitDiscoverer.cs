// ***********************************************************************
// Assembly         : PureActive.Core.Test.Abstractions
// Author           : SteveBu
// Created          : 04-11-2020
//
// Last Modified By : SteveBu
// Last Modified On : 04-11-2020
// ***********************************************************************
// <copyright file="PlatformTraitDiscoverer.cs" company="BushChang Corporation">
//     Copyright (c) BushChang Corporation. All rights reserved.
//     Licensed under the MIT license. See LICENSE file in the project root for full license information.
// </copyright>
// <summary></summary>
// ***********************************************************************

namespace PureActive.Core.Test.XUnit.Traits
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using PureActive.Core.Test.XUnit.Extensions;
    using Xunit.Abstractions;
    using Xunit.Sdk;

    /// <summary>
    /// The implementation of <see cref="ITraitDiscoverer" /> which returns the trait values
    /// for <see cref="PlatformTraitAttribute" />.
    /// </summary>
    public class PlatformTraitDiscoverer : ITraitDiscoverer
    {
        /// <inheritdoc/>
        public virtual IEnumerable<KeyValuePair<string, string>> GetTraits(IAttributeInfo traitAttribute)
        {
            if (traitAttribute is null)
            {
                throw new ArgumentNullException(nameof(traitAttribute));
            }

            yield return new KeyValuePair<string, string>("Category", GetOperatingSystemString(traitAttribute));
            yield return new KeyValuePair<string, string>("Category", GetTraitTestTypeString(traitAttribute));
        }

        private static string GetOperatingSystemString(IAttributeInfo traitAttribute) => GetOperatingSystemTrait(traitAttribute).ToString();

        /// <summary>
        /// Platforms the type.
        /// </summary>
        /// <param name="traitAttribute">The trait attribute.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        private static TraitOperatingSystem GetOperatingSystemTrait(IAttributeInfo traitAttribute)
        {
            var ctorArgs = traitAttribute.GetConstructorArguments().Cast<Type>().ToList();
            var assemblyNamespace = ctorArgs[0].GetAssemblyNamespace();

            if (assemblyNamespace.Contains(".Windows", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.Windows;
            }

            if (assemblyNamespace.Contains(".MacOS", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.MacOS;
            }

            if (assemblyNamespace.Contains(".OSX", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.MacOS;
            }

            if (assemblyNamespace.Contains(".Android", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.Android;
            }

            if (assemblyNamespace.Contains(".iOS", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.IOS;
            }

            if (assemblyNamespace.Contains(".Linux", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.Linux;
            }

            if (assemblyNamespace.Contains(".Core", StringComparison.OrdinalIgnoreCase))
            {
                return TraitOperatingSystem.Core;
            }

            return TraitOperatingSystem.Unknown;
        }

        private static string GetTraitTestTypeString(IAttributeInfo traitAttribute) =>
            GetTraitTestType(traitAttribute).ToString();

        /// <summary>
        /// Tests the type.
        /// </summary>
        /// <param name="traitAttribute">The trait attribute.</param>
        /// <returns>System.String.</returns>
        /// <autogeneratedoc />
        private static TraitTestType GetTraitTestType(IAttributeInfo traitAttribute)
        {
            var ctorArgs = traitAttribute.GetConstructorArguments().Cast<Type>().ToList();
            var getDisplayFullName = ctorArgs[0].GetDisplayFullName();

            if (getDisplayFullName.Contains(".Unit", StringComparison.OrdinalIgnoreCase))
            {
                return TraitTestType.Unit;
            }

            if (getDisplayFullName.Contains(".Integration", StringComparison.OrdinalIgnoreCase))
            {
                return TraitTestType.Integration;
            }

            if (getDisplayFullName.Contains(".Local", StringComparison.OrdinalIgnoreCase))
            {
                return TraitTestType.Local;
            }

            return TraitTestType.Unknown;
        }
    }
}
